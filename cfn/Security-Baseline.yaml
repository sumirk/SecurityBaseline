AWSTemplateFormatVersion: 2010-09-09
Description: >-
  You will be billed for the AWS resources used if you create a stack from this
  template.
  Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  A copy of the License is located at
  
      https://www.apache.org/licenses/LICENSE-2.0
  
  or in the "license" file accompanying this file. This file is distributed 
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
  express or implied. See the License for the specific language governing 
  permissions and limitations under the License.
Parameters:
  NotificationEmail:
    Type: String
    AllowedPattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
    ConstraintDescription: Please enter a valid email.
    Description: The email address to send the list of affected users.
  s3bucket:
    Description: Unique-S3-Bucket-name
    Type: String
    ConstraintDescription: Must be a S3 Bucket Present in Account.

Resources:
  # SNS Topic
  SecurityBaselineTopic:
    Type: 'AWS::SNS::Topic'
  SecurityBaselineSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref NotificationEmail
      Protocol: email
      TopicArn: !Ref SecurityBaselineTopic
# IAM role required for Lambda to access IAM and to send the email from SNS
  SecurityBaselineExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AWSCloudTrailReadOnlyAccess'
          - 'arn:aws:iam::aws:policy/IAMReadOnlyAccess'
          - 'arn:aws:iam::aws:policy/AWSSupportAccess'
          - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
        Policies:
          - PolicyDocument:
              Statement:
                - Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Effect: Allow
                  Resource: 'arn:aws:logs:*:*:*'
                - Action:
                    - 'iam:DeleteAccessKey'
                    - 'iam:DeleteUser'
                    - 'iam:GetAccessKeyLastUsed'
                    - 'iam:GetUser'
                    - 'iam:ListAccessKeys'
                    - 'iam:ListUsers'
                    - 'iam:UpdateAccessKey'
                    - 'iam:UpdateUser'
                    - 'iam:ListRoles'
                    - 'iam:GenerateServiceLastAccessedDetails'
                    - 'iam:GetServiceLastAccessedDetails'
                    - 'iam:DeleteRole'
                    - 'iam:AttachRolePolicy'
                    - 'access-analyzer:ListFindings'
                  Effect: Allow
                  Resource: '*' # Explicit that this includes all users
                - Action:
                  - 'sns:Publish'
                  Effect: Allow
                  Resource: !Ref SecurityBaselineTopic
              Version: 2012-10-17
            PolicyName: SecurityBaselinePolicy
  # Lambda function to audit the credentials
  SecurityBaselineLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SecurityBaselineLambda.lambda_handler
      Runtime: python3.8
      Role: !GetAtt SecurityBaselineExecutionRole.Arn
      Environment:
        Variables:
          TopicTarget: !Ref SecurityBaselineTopic
      Timeout: 700
      FunctionName: !Sub '${AWS::StackName}-Lambda'
      Code:
        S3Bucket: !Ref s3bucket
        S3Key: SecurityBaselineLambda.py.zip
  # CloudWatch event to trigger this
  SecurityBaselineTrigger:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'cron(0 0 12 * * ?)'
      State: 'ENABLED'
      Targets:
        -
          Arn: !GetAtt SecurityBaselineLambda.Arn
          Id: 'LambdaTarget'
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SecurityBaselineLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt SecurityBaselineTrigger.Arn

